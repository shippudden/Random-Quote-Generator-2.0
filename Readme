# Random Quote Generator  
A web application that displays inspirational quotes, allows users to add their own quotes, and provides a visually engaging experience with dynamic backgrounds and animations.

---

## Features

- **Random Quote Display:** Shows a random quote from a predefined list, changing automatically every 10 seconds or when the user clicks the "New Quote" button.
- **Add Custom Quotes:** Users can add their own quotes and authors via a modal dialog. Custom quotes are saved in localStorage for persistence.
- **No Immediate Repeats:** The same quote is never shown twice in a row.
- **Dynamic Background & Contrast:** Each quote change updates the background color and adjusts text color for readability.
- **Copy to Clipboard:** Users can copy the current quote to the clipboard with a button.
- **Animated Transitions:** Quotes and modal dialogs use fade and scale animations for a smooth user experience.

---

## How It Works

### 1. **Quote Management**
- Quotes are stored in an array. On page load, the app checks localStorage for saved quotes and loads them if available.
- When a user adds a new quote, it is validated (no empty fields), added to the array, and saved to localStorage.

### 2. **Displaying Quotes**
- The app picks a random quote index, ensuring it’s not the same as the last one shown.
- The quote text and author are updated in the DOM.
- The background color is randomized, and text color is set for optimal contrast.

### 3. **User Interactions**
- **New Quote Button:** Instantly shows a new random quote.
- **Add Quote Button:** Opens a modal for users to enter a custom quote and author.
- **Save Quote:** Validates input, adds the quote, saves to localStorage, and shows a success message.
- **Copy Quote Button:** Copies the current quote and author to the clipboard, showing a temporary confirmation message.

### 4. **Animations**
- Quotes fade out and in when changing.
- The modal dialog uses scale and opacity transitions.
- Success and copy messages fade in and out.

---

## Key Code Sections

### **Quote Array and Persistence**
```javascript
const quotes = [ /* ...default quotes... */ ];
let storedQuotes = localStorage.getItem('quotes');
if (storedQuotes) {
    try {
        const parsedQuotes = JSON.parse(storedQuotes);
        if (Array.isArray(parsedQuotes)) {
            quotes.length = 0;
            quotes.push(...parsedQuotes);
        }
    } catch (error) {
        console.error("Error parsing stored quotes:", error);
    }
}
```

### **Adding a Custom Quote**
```javascript
saveButton.addEventListener('click', () => {
    let customQuote = customQuoteInput.value.trim();
    let customAuthor = customAuthorInput.value.trim();

    if(customQuote === '') {
        errorMsg.textContent = "Quote cannot be empty!";
        errorMsg.style.display = 'block';
        errorMsg.style.color = 'red';
        return;
    } else if(customAuthor === '') {
        errMsg.textContent = "Author cannot be empty!";
        errMsg.style.display = 'block';
        errMsg.style.color = 'red';
        return;
    } else {
        errorMsg.style.display = 'none';
        errMsg.style.display = 'none';

        quotes.push({
            text: customQuote,
            author: `- ${customAuthor}`
        });

        localStorage.setItem('quotes', JSON.stringify(quotes));
        saveMsg.textContent = "Quote added successfully!";
        saveMsg.style.display = 'block';

        customQuoteInput.value = '';
        customAuthorInput.value = '';

        setTimeout(() => {
            saveMsg.style.display = 'none';
            modalOverlay.classList.add('hidden');
        }, 1000);
    }
});
```

### **Showing a Random Quote Without Repeats and adjustinf text based on the background**
```javascript
let lastQuoteIndex = -1;
function showRandomQuote () {
    quoteContent.classList.remove('show');
    setTimeout(() => {
        let randomIndex;
        do {
            randomIndex = Math.floor(Math.random() * quotes.length);
        } while (quotes.length > 1 && randomIndex === lastQuoteIndex);
        lastQuoteIndex = randomIndex;

        quoteText.textContent = quotes[randomIndex].text;
        quoteAuthor.textContent = quotes[randomIndex].author;

        const { color, r, g, b } = getRandomColor();
        document.body.style.backgroundColor = color;

        let brightness = (r * 299 + g * 587 + b * 114) / 1000;
        let textColor = brightness > 125 ? '#000' : '#fff';

        quoteText.style.color = textColor;
        quoteAuthor.style.color = textColor;
        button.style.color = textColor;
        addButton.style.color = textColor;
        copyMsg.style.color = textColor;
        copyButton.style.color = textColor;
        quoteContent.classList.add('show');
    }, 300);
}
```

### **Copy to Clipboard**
```javascript
copyButton.addEventListener("click", () => {
    let fullQuote = `"${quoteText.textContent}" - ${quoteAuthor.textContent}`;
    navigator.clipboard.writeText(fullQuote).then(() => {
        copyMsg.style.display = "inline";
        copyMsg.innerText = "Quote copied to clipboard!";
        setTimeout(() => {
            copyMsg.style.display = 'none'
        }, 1500);
    }).catch(err => {
        copyMsg.style.display = 'inline'
        copyMsg.innerText = 'Failed to copy quote' 
        console.error(err);
    });
});

// Generate a random color for the background
function getRandomColor () {
    const r = Math.floor(Math.random() * 256);
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return {
        color: `rgb(${r}, ${g}, ${b})`,
        r, g, b
    };
}
```

---

## Challenges Faced

- **Preventing Duplicate Quotes:** Ensured the same quote isn’t shown twice in a row by tracking the last index.
- **Persistence:** Used localStorage to save custom quotes so they persist after page reloads.
- **Input Validation:** Added checks and error messages for empty quote or author fields.
- **Dynamic Contrast:** Calculated background brightness to set readable text color.
- **Animation:** Implemented fade and scale transitions for a smooth UI experience.
- **Clipboard Feedback:** Provided user feedback after copying quotes.

## Managing Quote Change Intervals

Initially, clicking the "New Quote" button created multiple intervals, causing quotes to change more frequently than intended. This happened because a new setInterval was started on every button click, stacking intervals instead of using just one.
Synchronizing Manual and Automatic Quote Changes

Ensuring that both the automatic (every 10 seconds) and manual (button click) quote changes worked seamlessly without interfering with each other required careful event and interval management.
Implementing Smooth Animations

Achieving a smooth fade-in/fade-out animation for quote transitions was tricky. The animation needed to trigger correctly for both interval-based and button-triggered changes, requiring proper use of CSS classes and JavaScript timing.
Maintaining Text Contrast and Readability

With random background colors, ensuring the quote text remained readable was a challenge. This was solved by calculating the background brightness and dynamically setting the text color for optimal contrast.
Clipboard Copy Feedback

Providing user feedback after copying a quote to the clipboard required handling asynchronous clipboard operations and managing temporary UI messages.


---

## Possible Improvements

- Modularize code for better maintainability.
- Add categories or tags for quotes.
- Allow editing or deleting custom quotes.

---

## Technologies Used

- **HTML/CSS:** Structure and styling.
- **JavaScript:** Application logic, DOM manipulation, localStorage, clipboard API.

---